# -*- coding: utf-8 -*-
"""Amazon_reviews_F.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSKCh45TnXcd62zUyKByuN0yddtKNJzu
"""



import pandas as pd
import re

# Load data
df = pd.read_csv("Reviews.csv")  # Or mount from Drive

df.columns
df.head()

df.columns

df = df[['Text', 'Score', 'Time']]
df = df.rename(columns={'Text': 'review_text', 'Score': 'rating', 'Time': 'timestamp'})

# Drop missing reviews
df.dropna(subset=['review_text'], inplace=True)
df = df[df['review_text'].str.strip() != '']

# Clean text
def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+", "", text)  # remove links
    text = re.sub(r"[^a-z\s]", "", text)        # remove punctuation/numbers
    text = re.sub(r"\s+", " ", text).strip()
    return text

df['clean_text'] = df['review_text'].astype(str).apply(clean_text)

# Add word count
df['word_count'] = df['clean_text'].apply(lambda x: len(x.split()))
df = df[df['word_count'] >= 5]

# Convert Unix timestamp to readable date
df['timestamp'] = df['timestamp'].apply(lambda x: datetime.datetime.fromtimestamp(x))

# Preview
df[['timestamp', 'rating', 'clean_text', 'word_count']].head()

df[['timestamp', 'rating', 'clean_text', 'word_count']].to_csv('clean_reviews.csv', index=False)

"""Sentiment Analysis"""

from textblob import TextBlob

def get_sentiment(text):
    polarity = TextBlob(text).sentiment.polarity
    if polarity > 0.1:
        return "positive"
    elif polarity < -0.1:
        return "negative"
    else:
        return "neutral"

df['sentiment'] = df['clean_text'].apply(get_sentiment)
df[['clean_text', 'sentiment']].head()

"""Topic Extraction"""

def extract_topic(text):
    text = text.lower()
    if "delivery" in text or "late" in text:
        return "delivery issue"
    elif "price" in text or "expensive" in text:
        return "pricing"
    elif "quality" in text or "broken" in text:
        return "product quality"
    elif "support" in text or "customer service" in text:
        return "customer service"
    else:
        return "other"

df['topic'] = df['clean_text'].apply(extract_topic)

df[['timestamp', 'rating', 'clean_text', 'sentiment', 'topic']].to_csv('labeled_reviews.csv', index=False)



"""Install Hugging Face Transformers
In Colab or locally:
"""

!pip install transformers
!pip install torch

"""# Pretrained Sentiment Model"""

from transformers import pipeline

# Load sentiment model
sentiment_pipe = pipeline("sentiment-analysis")

# Test on one row
sentiment_pipe("This product is amazing. I love it!")

# Use on a sample first
sample_df = df.sample(20, random_state=42).copy()

# Apply sentiment analysis
sample_df['sentiment'] = sample_df['clean_text'].apply(lambda x: sentiment_pipe(x[:512])[0]['label'].lower())
sample_df[['clean_text', 'sentiment']].head()

""" Topic Classification"""

def extract_topic(text):
    text = text.lower()
    if "late" in text or "delivery" in text:
        return "delivery"
    elif "price" in text or "expensive" in text:
        return "pricing"
    elif "broken" in text or "quality" in text:
        return "product quality"
    elif "support" in text or "help" in text:
        return "customer service"
    else:
        return "other"

sample_df['topic'] = sample_df['clean_text'].apply(extract_topic)

sample_df[['timestamp', 'rating', 'clean_text', 'sentiment', 'topic']].to_csv("labeled_reviews_free.csv", index=False)
